AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Deploys an EC2 Instance, S3 bucket, and IAM Cross-Account trusted Role for use with Prowler. 
  Userdata has a bash script embedded which will be used for multi-account scanning. 
  Note that $ and ` in Userdata are escaped with \ if they are not supposed to be interpreted by CloudFormation

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetId
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - InstanceType
          - InstanceImageId
          - KeyPairName
          - PermittedSSHInbound
      - Label:
          default: "S3 Configuration"
        Parameters:
          - BucketName
          - EmailAddress          
      - Label:
          default: "IAM Configuration"
        Parameters:
          - IAMProwlerEC2Role
          - IAMProwlerExecRole
      - Label:
          default: "Prowler Script"
        Parameters:
          - Parallelism

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select a private subnet with Internet access. (Userdata is dependent on Internet for downloading binaries during EC2 provisioning)
  InstanceImageId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Description: Amazon Linux 2 Image
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  InstanceType:
    Type: String
    Default: c6i.2xlarge
    AllowedValues:
      - c6i.large
      - c6i.xlarge
      - c6i.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
    Description: "Specify the instance size to use. Parallel_Account Sizing: 4=c6i.large, 6=c6i.xlarge, 8=c6i.2xlarge. Use C5 if deploying in China Partition"
  BucketName:
    Type: String
    Description: Specify the Bucket Name for the Prowler output (Account ID and Region will be appended)
    Default: prowler-output
  EmailAddress:
    Type: String
    Description: "Optional: If you wish to receive a notification when Prowler is completed and has uploaded the zip file containing findings, enter an email address and accept the topic subscription before Prowler completes the assessment"
  IAMProwlerEC2Role:
    Type: "String"
    Description: "Name of IAM Role to be created for use with the Prowler EC2 Instance. This role's ARN is used with the ProwlerExecRole CFN template"
    Default: "ProwlerEC2Role"
  IAMProwlerExecRole:
    Type: "String"
    Description: "Name of IAM Role to be assumed in the member accounts. This name must match the IAM Role deployed via the ProwlerExecRole CFN template"
    Default: "ProwlerExecRole"
  Parallelism:
    Type: String
    Description: "Specify the number of accounts to assess in parallel. Appropriate Instance Type and Size must be selected (can be adjusted within prowler_scan.sh)"
    Default: 8
    AllowedValues:
      - 4
      - 6
      - 8
  KeyPairName:
    Type: "String"
    Description: "Optional: Specify the name of a pre-existing EC2 KeyPair if you require ssh to the Prowler instance.  Recommendation is to leave blank and use SSM Connect"
  PermittedSSHInbound:
    Type: "String"
    Description: "Optional: If allowing inbound SSH, specify the permitted CIDR else leave the default 127.0.0.1"
    Default: "127.0.0.1/32"

Mappings: 
  PartitionMap: 
    aws:
      ec2service: ec2.amazonaws.com
    aws-us-gov:
      ec2service: ec2.amazonaws.com
    aws-cn:
      ec2service: ec2.amazonaws.com.cn

Conditions:
  KeyProvided:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: KeyPairName

  EmailProvided:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: EmailAddress

Resources:
  ProwlerEC2RolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: "The resource must remain as * in order to assess all IAM Users."
          - id: W28
            reason: "The IAM Role name is specified as an explicit for use within the scripting"
    Properties:
      Description: !Sub "This policy grants necessary permissions to assume ${IAMProwlerExecRole} in AWS accounts"
      ManagedPolicyName: !Sub "${IAMProwlerEC2Role}Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement: #Actions below are given against all resources as per Prowler requirements to grant the appropriate level of read-only access to resources
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${IAMProwlerExecRole}"
          - Effect: Allow
            Action:
              - account:Get*
              - appstream:Describe*
              - codeartifact:ListRepositories
              - codebuild:BatchGetBuilds
              - ds:Get*
              - ds:Describe*
              - ds:List*
              - ec2:GetEbsEncryptionByDefault
              - ecr:Describe*
              - elasticfilesystem:DescribeBackupPolicy
              - glue:GetConnections
              - glue:GetSecurityConfiguration
              - glue:SearchTables
              - lambda:GetFunction
              - macie2:GetMacieSession
              - s3:GetAccountPublicAccessBlock
              - s3:GetEncryptionConfiguration
              - s3:GetPublicAccessBlock
              - shield:DescribeProtection
              - shield:GetSubscriptionState
              - ssm:GetDocument
              - support:Describe*
              - tag:GetTagKeys
            Resource: "*"
          - Effect: Allow
            Action:
              - apigateway:GET
            Resource:
              - !Sub "arn:${AWS::Partition}:apigateway:*::/restapis/*"
          - Effect: Allow
            Action:
              - "s3:PutObject*"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${S3Bucket}"
      Roles:
        - Ref: "ProwlerEC2Role"

  ProwlerEC2Role:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "The IAM Role name is specified as an explicit for use within the scripting"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !FindInMap [PartitionMap, !Ref "AWS::Partition", ec2service]
            Action:
              - "sts:AssumeRole"
      Description: "This role grants necessary permissions for the Prowler EC2 instance to assume roles in accounts"
      MaxSessionDuration: 43200
      ManagedPolicyArns: #SecurityAudit and ViewOnly Access are used as per Prowler requirements to grant the appropriate level of read-only access to resources
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/SecurityAudit"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/job-function/ViewOnlyAccess"
      Path: "/"
      RoleName: !Sub "${IAMProwlerEC2Role}"

  RootInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "The IAM Role name is specified as an explicit for use within the scripting"
    Properties:
      InstanceProfileName: !Sub "${IAMProwlerEC2Role}"
      Path: "/"
      Roles:
        - Ref: "ProwlerEC2Role"

  ProwlerSNSTopic:
    Condition: EmailProvided
    Type: AWS::SNS::Topic
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47
            reason: "The SNS Topic is used to send a notification when the Prowler Assessment is completed and an object is uploaded to S3"
    Properties:
      TopicName: ProwlerNotifications

  ProwlerSNSSubscription:
    Condition: EmailProvided
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref EmailAddress
      TopicArn: !Ref ProwlerSNSTopic
      
  ProwlerSNSTopicPolicy:
    Condition: EmailProvided
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sns:Publish
            Resource:
              Ref: ProwlerSNSTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"
      Topics:
        - !Ref ProwlerSNSTopic

  S3EventRule:
    Condition: EmailProvided
    Type: "AWS::Events::Rule"
    Properties:
      Description: Prowler S3 Bucket Event
      Name: ProwlerS3BucketEvent
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
            - !Ref S3Bucket
      State: ENABLED
      Targets:
        - Arn: !Ref ProwlerSNSTopic
          Id: ProwlerSNSTopic
          InputTransformer:
            InputPathsMap:
              "s3bucket": "$.detail.bucket.name"
              "s3objectkey": "$.detail.object.key"
            InputTemplate: |
              "Prowler asessment has completed and the report has been uploaded to the S3 Bucket."
              "Please download and process the findings"
              "S3 Bucket Name: <s3bucket>"
              "S3 Object Key: <s3objectkey>"
          RetryPolicy:
            MaximumRetryAttempts: 4
            MaximumEventAgeInSeconds: 400

  ProwlerSG:
    Type: "AWS::EC2::SecurityGroup"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "The Security Group name is specified explicitly."
          - id: W5
            reason: "The Security Group has egress rules with cidr open to world to download packages from repos."
    Properties:
      GroupDescription: "Security Group which allows outbound Internet and SSM access"
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - Description: "Download packages from Internet, SSM Connect, and write to S3"
          IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
        - Description: "DNS resolution"
          IpProtocol: "udp"
          FromPort: "53"
          ToPort: "53"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - Description: "Inbound SSH"
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref PermittedSSHInbound
      GroupName: "prowler-sg"
      Tags:
        - Key: "Name"
          Value: "prowler-sg"

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt ProwlerEC2Role.Arn
            Action: "s3:PutObject"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${S3Bucket}/*"
          - Sid: Deny non-HTTPS access
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${S3Bucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${S3Bucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "S3 access logging is not enable as the bucket is used once for finding download."
    Properties:
      BucketName: !Sub "${BucketName}-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: "Name"
          Value: !Sub "${BucketName}-${AWS::AccountId}-${AWS::Region}"

  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: "required"

  Ec2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId:
        Ref: "InstanceImageId"
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "8"
            DeleteOnTermination: true
            VolumeType: "gp3"
            Encrypted: true
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref IAMProwlerEC2Role
      LaunchTemplate:
        LaunchTemplateId:
          Ref: "LaunchTemplate"
        Version: "1"
      Monitoring: true
      KeyName:
        Fn::If:
          - KeyProvided
          - Ref: KeyPairName
          - Ref: AWS::NoValue
      SecurityGroupIds:
        - !GetAtt "ProwlerSG.GroupId"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum upgrade -y
            sudo yum remove -y awscli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            ln -s /usr/local/bin/aws /usr/local/sbin/aws
            sudo yum install jq git pip -y
            pip3 install detect-secrets==1.0.3
            ln -s /usr/local/bin/detect-secrets /bin/detect-secrets

            cd /usr/local/bin

            #Download a specific validated repo branch.  This will be updated for new releases once validated.
            git clone -b 2.12.0 https://github.com/prowler-cloud/prowler

            cd prowler
            tee -a prowler_scan.sh <<EOF
            #!/bin/bash -e
            #
            #
            # Prowler multi-account assessment script:
            #   Used to drive the assessment of AWS accounts via Prowler, post-processing the output reports
            #   and optimizing the effort involved via automation.
            #
            # Script version: 2.85
            #
            # Tunable parameters to review:
            #   1) PARALLELISM: Can be tuned to specify how many accounts to assess simultaneously.
            #       The instance size must be adjusted appropriately.
            #       Be aware of AWS Account level EC2 API Throttling limits and to execute this script in an account with minimal workloads.
            #       C6i.2xlarge can sustain 9 parallel assessments.
            #       Utilize appropriately sized EC2 instance (4=c6i.large,6=c6i.xlarge, 8=c6i.2xlarge)
            #   2) AWSACCOUNT_LIST: Specify the accounts to be assessed using one of the supported methods:
            #       Use the keyword allaccounts to generate a list of all accounts in the AWS Org
            #       Use the keyword inputfile to read in AWS Account IDs from a file (If using this mode, must also set AWSACCOUNT_LIST_FILE)
            #       Use a space separated list of AWS Account IDs
            #   3) AWSACCOUNT_LIST_FILE: If using AWSACCOUNT_LIST="inputfile", specify the path to the file
            #   4) REGION_LIST: Specify regions (SPACE DELIMITED) if you wish to assess specific AWS regions
            #       or leave allregions to include all AWS regions.
            #   5) IAM_CROSS_ACCOUNT_ROLE: The IAM Role name created for cross account access
            #   6) The prowler command within the for loop can be tuned to meet the needs of the assessment.
            #       "./prowler -R ProwlerExecRole -A "$accountId"  -M csv html -T 43200 > output/stdout-$accountId.txt 2>&1"
            #       See Prowler documentation for all options.
            #   7) ACCOUNTID_WITH_NAME: By default, the value is true, the value of ACCOUNT_NUM column in the final report is populated with Account Name 
            #       in the format <AccountId-AccountName>. Changing the value to false will produce the report with ACCOUNT_NUM=<AccountId>. 
            #   8) S3_BUCKET: The S3 bucket which will be used for Prowler report upload
            #########################################

            #Variables which can be modified: (In most cases, scanning all accounts and all regions is preferred for a complete assessment)

            #Adjust PARALLELISM to adjust the number of parallel scans 
            PARALLELISM="${Parallelism}"

            #Specify accounts to be assessed using one of the supported methods:
            #  Use the keyword allaccounts to generate a list of all accounts in the AWS Org
            #  Use the keyword inputfile to read in AWS Account IDs from a file
            #  Use a space separated list of AWS Account IDs
            AWSACCOUNT_LIST="allaccounts"
            #AWSACCOUNT_LIST="inputfile"
            #AWSACCOUNT_LIST="123456789012 210987654321"

            #If using AWSACCOUNT_LIST="inputfile", specify the path to the file:
            #  If the file is located in the /use/local/bin/prowler directory, specify the filename, else specify the full path
            #  Account IDs can be specified on one line (space separated) or one Account ID per line
            #AWSACCOUNT_LIST_FILE="file_with_account_ids

            #Specify the regions to have assessed (space separated) or use the keyword allregions to include all regions:
            REGION_LIST="allregions"
            #REGION_LIST="us-east-1 us-east-2"

            #Specify an IAM Role to use for cross account access in the target accounts (Execution Role):
            IAM_CROSS_ACCOUNT_ROLE="${IAMProwlerExecRole}"

            #Specify whether to output Account ID with Account Name in the final report.
            ACCOUNTID_WITH_NAME=true

            S3_BUCKET="${S3Bucket}"
            #########################################

            # CleanUp Last Ran Prowler Reports if they exist
            rm -rf output/*

            # CleanUp prowler_output.zip from previous run if it exists
            rm -rf prowler_output.zip

            # Create output folder for first time scan with redirected stout
            mkdir -p output

            #Create default aws cli config file for the user executing prowler.  The EC2 IAM Profile will grant appropriate permissions
            aws configure set region ${AWS::Region}

            # Unset environment variables if they exist and utilize IAM Role attached to the EC2 instance
            unset_aws_environment() {
                unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            }
            unset_aws_environment

            # Determine the executing account AWS Number and Partition
            CALLER_IDENTITY_ARN=\$(aws sts get-caller-identity --output text --query "Arn")
            AWSPARTITION=\$(echo "\$CALLER_IDENTITY_ARN" | cut -d: -f2)
            EXECACCOUNT=\$(echo "\$CALLER_IDENTITY_ARN" | cut -d: -f5)
            echo ""
            echo "AWS account Prowler is executing from: \$EXECACCOUNT"
            echo ""

            # Assume Role in Managment account and export session credentials
            management_account_session() {
                AWSMANAGEMENT=\$(aws organizations describe-organization --query Organization.MasterAccountId --output text)
                echo "AWS organization Management account: \$AWSMANAGEMENT"

                unset_aws_environment
                ROLE_SESSION_CREDS=\$(aws sts assume-role --role-arn arn:"\$AWSPARTITION":iam::"\$AWSMANAGEMENT":role/"\$IAM_CROSS_ACCOUNT_ROLE" --role-session-name ProwlerRun --output json)
                AWS_ACCESS_KEY_ID=\$(echo "\$ROLE_SESSION_CREDS" | jq -r .Credentials.AccessKeyId)
                AWS_SECRET_ACCESS_KEY=\$(echo "\$ROLE_SESSION_CREDS" | jq -r .Credentials.SecretAccessKey)
                AWS_SESSION_TOKEN=\$(echo "\$ROLE_SESSION_CREDS" | jq -r .Credentials.SessionToken)
                export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            }

            #Monitor the number of background processes and return to task execution for loop when bg jobs are less than PARALLELISM limit
            process_monitor() {
                while [ "\$(jobs | wc -l)" -ge \$PARALLELISM ]
                do
                    sleep 10
                done
            }

            if [ "\$AWSACCOUNT_LIST" = "allaccounts" ]; then
                # Lookup All Accounts in AWS Organization
                management_account_session
                ACCOUNTS_TO_PROCESS=\$(aws organizations list-accounts --output text --query 'Accounts[?Status==\`ACTIVE\`].Id')
                echo ""
            elif [ "\$AWSACCOUNT_LIST" = "inputfile" ]; then
                if [ -e \$AWSACCOUNT_LIST_FILE ]; then
                    echo "Reading External File: \$AWSACCOUNT_LIST_FILE"
                    ACCOUNTS_TO_PROCESS=\$(cat \$AWSACCOUNT_LIST_FILE)
                else
                    echo "External file \$AWSACCOUNT_LIST_FILE not located. Please validate the file/path and update the AWSACCOUNT_LIST_FILE variable."
                    exit 0
                fi
            else
                ACCOUNTS_TO_PROCESS=\$AWSACCOUNT_LIST
            fi

            # Display account and region selection
            echo ""
            if [ "\$AWSACCOUNT_LIST" = "allaccounts" ]; then
                echo "AWS Accounts being processed: All accounts in the AWS organization."
                echo "\$ACCOUNTS_TO_PROCESS"
            else
                echo "AWS Accounts being processed: Specified AWS accounts below."
                echo "\$ACCOUNTS_TO_PROCESS"
            fi

            echo ""
            echo "AWS regions being processed:"
            if [ "\$REGION_LIST" == "allregions" ]; then
                echo "All AWS regions"
            else
                echo \$REGION_LIST
            fi

            echo ""
            echo "All stdout from prowler scans will be redirected to output/stdout-accountId.txt"
            echo "As specific account assessments are completed, additional accounts will be assessed from the list"
            echo ""

            # Run Prowler against selected accounts and regions
            if [ "\$REGION_LIST" == "allregions" ]; then
                for ACCOUNTID in \$ACCOUNTS_TO_PROCESS; do
                    test "\$(jobs | wc -l)" -ge \$PARALLELISM && process_monitor || true
                    {
                        # Unset AWS Profile Variables
                        unset_aws_environment
                        echo -e "Assessing AWS Account: \$ACCOUNTID with all AWS regions using Role: \$IAM_CROSS_ACCOUNT_ROLE on \$(date)"
                        # Run Prowler
                        ./prowler -R \$IAM_CROSS_ACCOUNT_ROLE -A "\$ACCOUNTID" -M csv,html -T 43200 > output/stdout-\$ACCOUNTID.txt 2>&1 
                    } &
                done
            else
                for ACCOUNTID in \$ACCOUNTS_TO_PROCESS; do
                    test "\$(jobs | wc -l)" -ge \$PARALLELISM && process_monitor || true
                    {
                        # Unset AWS Profile Variables
                        unset_aws_environment
                        echo -e "Assessing AWS Account: \$ACCOUNTID with regions: \$REGION_LIST using Role: \$IAM_CROSS_ACCOUNT_ROLE on \$(date)"
                        # Run Prowler with -f and scans regions specified in the \$REGION_LIST variable
                        ./prowler -R \$IAM_CROSS_ACCOUNT_ROLE -A "\$ACCOUNTID" -M csv,html -f "\$REGION_LIST" -T 43200 > output/stdout-\$ACCOUNTID.txt 2>&1 
                    } &
                done
            fi

            # Wait for All Prowler Processes to finish
            wait
            echo ""
            echo "Prowler assessments have been completed against all accounts"
            echo ""

            #Unset the STS AssumeRole session and revert to permissions via the EC2 attached IAM Role
            unset_aws_environment

            # Prowler Output Post-Processing
            echo "======================================================================================"
            echo "Prowler Output Post-Processing"
            echo "======================================================================================"
            echo ""

            # Below logic is to reset the variable ACCOUNTID_WITH_NAME
            if \$ACCOUNTID_WITH_NAME; then
                echo "ACCOUNTID_WITH_NAME flag is ON, verifying to ensure AWS Org. is configured and can be queried to get list of accounts."
                management_account_session
                IS_ACCOUNT_PART_OF_AWS_ORG=\$(aws organizations describe-organization);
                if [ "\$IS_ACCOUNT_PART_OF_AWS_ORG" == "" ]; then
                    # Account where prowler is executed is not part of the AWS Organizations.
                    # Change the value of the variable ACCOUNTID_WITH_NAME to false.
                    echo "AWS Org was not found! Skipping report generation with Account Name (Resetting the flag ACCOUNTID_WITH_NAME to false)."
                    ACCOUNTID_WITH_NAME=false;
                fi
                # Verfiy AWS org. can be queried to get list of accounts.
                if \$ACCOUNTID_WITH_NAME; then
                    rm -f output/accts.txt # Delete previously generated accounts list file if exists.
                    aws organizations list-accounts | jq -r '[.Accounts[] | {Account: .Id, Arn: .Arn, Email: .Email, Name: .Name, AccountName: (.Id + "-" + .Name), Status: .Status, JoinedMethod: .JoinedMethod, JoinedTimestamp: .JoinedTimestamp}]' | jq -r '(.[0] | keys_unsorted) as \$keys | \$keys, map([.[ \$keys[] ]])[] | @csv' | sed 's/\"//g' > output/accts.txt    
                    if [ ! -f "output/accts.txt" ]; then
                        echo "Failed getting list of Accounts from AWS Org! Skipping report generation with Account Name (Resetting the flag ACCOUNTID_WITH_NAME to false)."
                        ACCOUNTID_WITH_NAME=false;
                    fi
                fi
                unset_aws_environment
                echo "Completed."
                echo ""
            fi 

            CONSOLIDATED_REPORT=output/prowler-fullorgresults.csv;
            if \$ACCOUNTID_WITH_NAME; then    
                # Concatenating all output csv files into a single file for use with Excel and replace account_num with <AccountId-AccountName>
                echo "Concatenating all output csv files into a single file for use with Excel and replacing account_num with <AccountId-AccountName>..."
                counter=1; 
                rm -f output/prowler-fullorgresults-temp.csv; 
                for fileName in output/prowler-*.csv ; do 
                    if [[ "\$fileName" != "output/prowler-fullorgresults.csv" && "\$fileName" != "output/prowler-fullorgresults-accessdeniedfiltered.csv" && "\$fileName" != "output/prowler-fullorgresults-with-acct-name.csv" && "\$fileName" != "output/prowler-fullorgresults-raw.csv" ]]; then  
                        echo "Processing the file \$fileName to replace AccountId with Name."
                        acctId=\$(awk 'BEGIN{FS=OFS=","} {if(NR==2) {print \$2}}' \$fileName); 
                        acctName=\$(awk -v var=\$acctId '\$1 == var {print \$5}' FS=, output/accts.txt); 
                        if [[  "\$counter" == "1" ]]; then
                            # Header line
                            awk 'NR==1 {print; exit}' \$fileName > \$CONSOLIDATED_REPORT;
                            ((counter+=1));
                        fi
                        # echo "\$counter    \$fileName    \$acctId    \$acctName"; # debug statement
                        if [ "\$acctName" == "" ]; then
                            echo "Skipping Account Name replacement for the file \$fileName, REASON: Account Name for the account \$acctId not found in the file output/accts.txt"
                            awk 'NR>1' \$fileName > output/PROCESS.csv; 
                            rm -f output/PROCESS.csv;
                        else
                            echo "Performing Account Name replacement for the file \$fileName, ACCOUNT_NUM=\$acctId with new value \$acctName"
                            awk 'NR>1' \$fileName > output/PROCESS.csv; 
                            awk -F, -v var="\$acctName" '{\$2=var;}1' OFS=, output/PROCESS.csv >> output/prowler-fullorgresults-temp.csv;
                            rm -f output/PROCESS.csv;
                        fi            
                    fi  
                done ; 
                cat output/prowler-fullorgresults-temp.csv | sort | uniq >> \$CONSOLIDATED_REPORT; 
                rm -f output/prowler-fullorgresults-temp.csv;     
                echo "Completed."
                echo ""
            else
                #Concatenating all output csv files into a single file for use with Excel
                echo "Concatenating all output csv files into a single file for use with Excel..."
                cat output/prowler-*.csv | sort | uniq > output/prowler-fullorgresults-raw.csv
                echo "Completed."
                echo ""

                # Move the final line in the file (Header) to the top for easier location in Excel
                awk '{a[NR]=\$0} END {print a[NR]; for (i=1;i<NR;i++) print a[i]}' output/prowler-fullorgresults-raw.csv > \$CONSOLIDATED_REPORT

                # Remove the initial concatenated raw file
                rm -rf output/prowler-fullorgresults-raw.csv    
            fi # end of if ACCOUNTID_WITH_NAME is true.

            #Perform processing to remove common "Access Denied" errors from output while preserving the "full" output
            echo "Creating an optional filtered version of the concatenate output for use with Excel..."
            grep -v -i 'Access Denied getting bucket\|Access Denied Trying to Get\|InvalidToken' \$CONSOLIDATED_REPORT > output/prowler-fullorgresults-accessdeniedfiltered.csv
            echo "Completed."
            echo ""

            #Zip output results into a single file for download (stdout-* includes stdout and can be reviewed for troubleshooting)
            OUTPUT_SUFFIX=\$(date +%m-%d-%Y-%H-%M);
            echo "Zipping output results into a single file for download. Output File: prowler_output.zip"
            zip prowler_output-\$OUTPUT_SUFFIX.zip output/*.csv output/*.txt output/*.html
            echo "Completed."
            echo ""

            #Upload Prowler Report to S3
            aws s3 cp prowler_output-\$OUTPUT_SUFFIX.zip s3://\$S3_BUCKET
            EOF

            chmod +x prowler_scan.sh
      Tags:
        - Key: "Name"
          Value: "prowlerec2"

Outputs:
  ProwlerEC2Role:
    Description: The ARN of the ProwlerEC2Role
    Value: !GetAtt ProwlerEC2Role.Arn
